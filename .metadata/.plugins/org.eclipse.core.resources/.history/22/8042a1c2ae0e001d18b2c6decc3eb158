/*
 * users_db.cpp
 *
 *  Created on: Jun 22, 2022
 *      Author: omarh
 */

#include "users_db.hpp"

#include <iostream>
#include <fstream>
#include <sstream>

int UsersDb::generate_id()
{
	const std::string path = USERSTXT_PATH;
	std::vector<std::string> lines;
	read_file_lines(path, lines);

	std::vector<std::string> v(USER_ITEMS);
	const int linesSize = (int)lines.size();
	if(linesSize){
		split_user_toVector(lines[linesSize-1], v, DELIMITER);
		return stoi(v[ID])+1;
	}
	return 1;
}

void UsersDb::read_file_lines(std::string path, std::vector<std::string>& lines){
	std::fstream file_handler(path.c_str());
	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return;
	}

	std::string line;
	/* check if file is empty */
	if (file_handler.peek() == std::ifstream::traits_type::eof()){
		file_handler.close();
		return;
	}

	while (getline(file_handler, line)) {
		if (line.size() == 0)
			continue;
		lines.push_back(line);
	}

	file_handler.close();
}

bool UsersDb::write_file_lines(std::string path, std::vector<std::string>& lines, bool append = true) {
	auto status = std::ios::in | std::ios::out | std::ios::app;

	if (!append)
		status = std::ios::in | std::ios::out | std::ios::trunc;	// overwrite

	std::fstream file_handler(path.c_str(), status);

	if (file_handler.fail()) {
		std::cout << "\n\nERROR: Can't open the file\n\n";
		return false;
	}
	for (auto line : lines)
		file_handler << line << "\n";

	file_handler.close();
	return true;
}

void UsersDb::split_user_toVector(std::string line, std::vector<std::string> &v, const std::string del)
{
	int pos = 0;
	std::string substr;
	while ((pos = (int) line.find(del)) != -1) {
		substr = line.substr(0, pos);
		v.push_back(substr);
		line.erase(0, pos + (int)del.size());
	}
	v.push_back(line);
}

std::pair<User, bool> UsersDb::get_user(const int id)
{
	User user;
	std::pair<User, bool> userPair;
	userPair.second = 0;

	const std::string path = USERSTXT_PATH;
	std::vector<std::string> lines;
	read_file_lines(path, lines);

	for (auto& line: lines)
	{
		std::vector<std::string> v(USER_ITEMS);
		split_user_toVector(line, v, DELIMITER);

		if (stoi(v[ID]) == id)
		{
			user.id = stoi(v[ID]);
			user.allowAnonQs = stoi(v[ALLOW_ANON_Q]);
			userPair.first = user;
			userPair.second = 1;
			return userPair;
		}
	}
	return userPair;
}

std::pair<User, bool> UsersDb::get_user_login(std::string username, std::string password)
{
	std::pair<User, bool> userExistPair;
	userExistPair.second = 0;
	const std::string path = USERSTXT_PATH;
	std::vector<std::string> lines;
	read_file_lines(path, lines);

	for (auto& line: lines)
	{
		std::vector<std::string> v(USER_ITEMS);
		split_user_toVector(line, v, DELIMITER);

		if (username == v[USERNAME] && password == v[PASSWORD])
		{
			userExistPair.first.id = stoi(v[ID]);
			userExistPair.first.allowAnonQs = stoi(v[ALLOW_ANON_Q]);
			userExistPair.second = 1;
			return userExistPair;
		}
	}
	return userExistPair;
}

bool UsersDb::add_user(User &user)
{
	user.id = generate_id();

	std::vector<std::string> lines;
	std:: string line= std::to_string(user.id) + DELIMITER + user.username + DELIMITER + user.password + DELIMITER + std::to_string(user.allowAnonQs) + '\n';
	lines.push_back(line);
	write_file_lines(USERSTXT_PATH, lines);

	return 1;
}

void UsersDb::print()
{
	const std::string path = "users.txt";
	std::vector<std::string> lines;
	read_file_lines(path, lines);

	for (auto& line: lines)
	{
		std::vector<std::string> v(USER_ITEMS);
		split_user_toVector(line, v, DELIMITER);
		std::cout << "ID: " << v[ID] << "\tUserName: " << v[USERNAME] << '\n';
	}
	std::cout << '\n';
}
