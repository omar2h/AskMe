/*
 * users_db.cpp
 *
 *  Created on: Jun 22, 2022
 *      Author: omarh
 */

#include "users_db.hpp"

#include <iostream>
#include <fstream>
#include <sstream>

int UsersDb::generate_id()
{
	std::string path = "users.txt";
	std::fstream file_handler(path.c_str());

	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return 0;
	}

	std::string line;
	std::string idStr;
	int count = 1;
	if (file_handler.peek() == std::ifstream::traits_type::eof())
		return count;

	while (getline(file_handler, line))
	{
		std::istringstream iss(line);
		std::getline(iss, idStr, DELIMITER);
	}
	return stoi(idStr) + 1;
}

void UsersDb::read_file_lines(std::string path, std::vector<std::string>& lines){
	std::fstream file_handler(path.c_str());

	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
	}

	std::string line;

	/* check if file is empty */
	if (file_handler.peek() == std::ifstream::traits_type::eof())
		return;

	while (getline(file_handler, line)) {
		if (line.size() == 0)
			continue;
		lines.push_back(line);
	}
}

void UsersDb::split_user_toVector(std::string line, std::vector<std::string> &v, const std::string del)
{
	int pos = 0;
	std::string substr;
	while ((pos = (int) line.find(del)) != -1) {
		substr = line.substr(0, pos);
		v.push_back(substr);
		line.erase(0, pos + (int)del.size());
	}
	v.push_back(line);
}

std::pair<User, bool> UsersDb::get_user(const int id)
{
	User user;
	std::pair<User, bool> userPair;
	userPair.second = 0;

	const std::string path = "users.txt";
	std::vector<std::string> lines;
	read_file_lines(path, lines);

	for (auto& line: lines)
	{
		std::vector<std::string> v(USER_ITEMS);
		split_user_toVector(line, v, DELIMITER);

		if (stoi(v[ID]) == id)
		{
			user.id = stoi(v[ID]);
			user.allowAnonQs = stoi(v[ALLOW_ANON_Q]);
			userPair.first = user;
			userPair.second = 1;
			return userPair;
		}
	}
	return userPair;
}

std::pair<User, bool> UsersDb::get_user_login(std::string username, std::string password)
{
	std::pair<User, bool> userExistPair;
	userExistPair.second = 0;
	const std::string path = "users.txt";
	std::vector<std::string> lines;
	read_file_lines(path, lines);

	for (auto& line: lines)
	{
		std::vector<std::string> v(USER_ITEMS);
		split_user_toVector(line, v, DELIMITER);

		if (username == v[USERNAME] && password == v[PASSWORD])
		{
			userExistPair.first.id = stoi(v[ID]);
			userExistPair.first.allowAnonQs = stoi(v[ALLOW_ANON_Q]);
			userExistPair.second = 1;
			return userExistPair;
		}
	}
	return userExistPair;
}

bool UsersDb::add_user(User &user)
{
	user.id = generate_id();
	std::ofstream fout("users.txt", std::ios_base::app);

	if (fout.fail())
	{
		std::cout << "Can't open file\n";
		return 0;
	}

	fout << user.id << ',' << user.username << ',' << user.password << ',' << user.allowAnonQs << '\n';
	return 1;
}

void UsersDb::print()
{

	std::string path = "users.txt";
	std::fstream file_handler(path.c_str());

	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return;
	}

	std::string line;
	std::string idStr, allowAnonQsStr, username, password;

	while (getline(file_handler, line))
	{
		std::stringstream iss(line);
		std::getline(iss, idStr, ',');
		std::getline(iss, username, ',');
		std::getline(iss, password, ',');
		std::getline(iss, allowAnonQsStr, ',');
		std::cout << "ID: " << idStr << "\tUserName: " << username << '\n';
	}

	std::cout << '\n';
}
