/*
 * question_db.cpp
 *
 *  Created on: Jun 23, 2022
 *      Author: omarh
 */

#include "questions_db.hpp"

#include <fstream>
#include <sstream>
#include <algorithm>

int QuestionsDb::generate_id()
{
	std::string path = "questions.txt";
	std::fstream file_handler(path.c_str());

	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return 0;
	}

	std::string line;
	std::string idStr;

	if (file_handler.peek() == std::ifstream::traits_type::eof())
		return 1;

	while (getline(file_handler, line))
	{
		std::istringstream iss(line);
		std::getline(iss, idStr, ',');
		std::cout << idStr << '\n';
	}
	return stoi(idStr) + 1;
}

bool QuestionsDb::add_question(Question &q)
{
	q.id = generate_id();
	std::ofstream fout("questions.txt", std::ios_base::app);

	if (fout.fail())
	{
		std::cout << "Can't open file\n";
		return 0;
	}

	fout << q.id << ',' << q.threadId << ',' << q.fromId << ',' << q.toId << ',' << q.anon << ',' << q.answered << ',' << q.text << ',' << q.ans << '\n';
	return 1;
}

std::pair<Question, bool> QuestionsDb::get_question(const int id)
{
	Question q;
	std::pair<Question, bool> qPair;
	qPair.second = 0;

	std::string path = "questions.txt";
	std::fstream file_handler(path.c_str());

	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return qPair;
	}

	std::string line;
	std::string idStr, thrdStr, toStr, fromStr, anonStr, ansdStr;
	while (getline(file_handler, line))
	{
		std::stringstream iss(line);
		std::getline(iss, idStr, ',');
		std::getline(iss, thrdStr, ',');
		std::getline(iss, fromStr, ',');
		std::getline(iss, toStr, ',');
		std::getline(iss, anonStr, ',');
		std::getline(iss, ansdStr, ',');
		std::getline(iss, q.text, ',');
		std::getline(iss, q.ans, ',');

		if (stoi(idStr) == id)
		{
			q.id = stoi(idStr);
			q.threadId = stoi(thrdStr);
			q.toId = stoi(toStr);
			q.fromId = stoi(fromStr);
			q.anon = stoi(anonStr);
			q.answered = stoi(ansdStr);
			qPair.first = q;
			qPair.second = 1;
			return qPair;
		}
	}
	return qPair;
}

std::map<int, std::vector<Question>> QuestionsDb::get_to_user(const int uId)
{
	std::map<int, std::vector<Question>> mp;
	Question q;

	std::string path = "questions.txt";
	std::fstream file_handler(path.c_str());

	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return mp;
	}

	std::string line;
	std::string idStr, thrdStr, toStr, fromStr, anonStr, ansdStr, text, ans;
	while (getline(file_handler, line))
	{
		std::stringstream iss(line);
		std::getline(iss, idStr, ',');
		std::getline(iss, thrdStr, ',');
		std::getline(iss, fromStr, ',');
		std::getline(iss, toStr, ',');
		std::getline(iss, anonStr, ',');
		std::getline(iss, ansdStr, ',');
		std::getline(iss, text, ',');
		std::getline(iss, ans, ',');

		if (!toStr.empty() && std::all_of(toStr.begin(), toStr.end(), ::isdigit) && stoi(toStr) == uId)
		{
			q.id = (stoi(idStr));
			q.threadId = (stoi(thrdStr));
			q.fromId = (stoi(fromStr));
			q.toId = (stoi(toStr));
			q.anon = stoi(anonStr);
			q.answered = (stoi(ansdStr));
			q.text = text;
			q.ans = ans;
			if (q.threadId == -1)
				mp[q.id].push_back(q);
			else
			{
				mp[q.id].push_back(q);
				mp[q.threadId].push_back(q);
			}
		}
	}
	return mp;
}

bool QuestionsDb::get_questions_from_user(const int uId, std::vector<Question> &v)
{
	Question q;

	std::string path = "questions.txt";
	std::fstream file_handler(path.c_str());

	if (file_handler.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return 0;
	}

	std::string line;
	std::string idStr, thrdStr, toStr, fromStr, anonStr, ansdStr, text, ans;
	while (getline(file_handler, line))
	{
		std::stringstream iss(line);
		std::getline(iss, idStr, ',');
		std::getline(iss, thrdStr, ',');
		std::getline(iss, fromStr, ',');
		std::getline(iss, toStr, ',');
		std::getline(iss, anonStr, ',');
		std::getline(iss, ansdStr, ',');
		std::getline(iss, text, ',');
		std::getline(iss, ans, ',');

		if (!toStr.empty() && std::all_of(toStr.begin(), toStr.end(), ::isdigit) && stoi(fromStr) == uId)
		{
			q.id = (stoi(idStr));
			q.threadId = (stoi(thrdStr));
			q.fromId = (stoi(fromStr));
			q.toId = (stoi(toStr));
			q.anon = stoi(anonStr);
			q.answered = (stoi(ansdStr));
			q.text = text;
			q.ans = ans;

			v.push_back(q);
		}
	}
	return 1;
}

void QuestionsDb::delete_q(const int qId)
{

	std::string path = "questions.txt";
	std::fstream file_handler1(path.c_str());

	std::ofstream fout("temp.txt", std::ios_base::out);

	if (file_handler1.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return;
	}

	if (fout.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return;
	}

	std::string line;
	std::string idStr, thrdStr, toStr, fromStr, anonStr, ansdStr, text, ans;
	while (getline(file_handler1, line))
	{
		std::stringstream iss(line);
		std::getline(iss, idStr, ',');
		std::getline(iss, thrdStr, ',');
		std::getline(iss, fromStr, ',');
		std::getline(iss, toStr, ',');
		std::getline(iss, anonStr, ',');
		std::getline(iss, ansdStr, ',');
		std::getline(iss, text, ',');
		std::getline(iss, ans, ',');

		if (stoi(idStr) == qId || stoi(thrdStr) == qId)
		{
			continue;
		}
		fout << idStr << "," << thrdStr << "," << fromStr << "," << toStr << "," << anonStr << "," << ansdStr << "," << text << "," << ans << "\n";
	}
	file_handler1.close();
	fout.close();
	remove("questions.txt");
	rename("temp.txt", "questions.txt");
}
void QuestionsDb::update_answer(const Question &q)
{

	int id = q.id;
	std::string path = "questions.txt";
	std::fstream file_handler1(path.c_str());

	std::ofstream fout("temp.txt", std::ios_base::out);

	if (file_handler1.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return;
	}

	if (fout.fail())
	{
		std::cout << "\n -------- Can't open file -----------\n\n";
		return;
	}

	std::string line;
	std::string idStr, thrdStr, toStr, fromStr, anonStr, ansdStr, text, ans;
	while (getline(file_handler1, line))
	{
		std::stringstream iss(line);
		std::getline(iss, idStr, ',');
		std::getline(iss, thrdStr, ',');
		std::getline(iss, fromStr, ',');
		std::getline(iss, toStr, ',');
		std::getline(iss, anonStr, ',');
		std::getline(iss, ansdStr, ',');
		std::getline(iss, text, ',');
		std::getline(iss, ans, ',');

		if (stoi(idStr) == id)
		{
			fout << q.id << ',' << q.threadId << ',' << q.fromId << ',' << q.toId << ',' << q.anon << ',' << q.answered << ',' << q.text << ',' << q.ans << '\n';
		}
		else
		{
			fout << idStr << "," << thrdStr << "," << fromStr << "," << toStr << "," << anonStr << "," << ansdStr << "," << text << "," << ans << "\n";
		}
	}
	file_handler1.close();
	fout.close();
	remove("questions.txt");
	rename("temp.txt", "questions.txt");
}

std::vector<Question> QuestionsDb::feed(){

	std::vector<Question> qv;
	Question q;
		std::string path = "questions.txt";
		std::fstream file_handler(path.c_str());

		if (file_handler.fail())
		{
			std::cout << "\n -------- Can't open file -----------\n\n";
		}

		std::string line;
		std::string idStr, thrdStr, toStr, fromStr, anonStr, ansdStr, text, ans;
		while (getline(file_handler, line))
		{
			std::stringstream iss(line);
			std::getline(iss, idStr, ',');
			std::getline(iss, thrdStr, ',');
			std::getline(iss, fromStr, ',');
			std::getline(iss, toStr, ',');
			std::getline(iss, anonStr, ',');
			std::getline(iss, ansdStr, ',');
			std::getline(iss, text, ',');
			std::getline(iss, ans, ',');

			if (stoi(ansdStr))
			{
				q.id = (stoi(idStr));
							q.threadId = (stoi(thrdStr));
							q.fromId = (stoi(fromStr));
							q.toId = (stoi(toStr));
							q.anon = stoi(anonStr);
							q.answered = (stoi(ansdStr));
							q.text = text;
							q.ans = ans;

							qv.push_back(q);
			}
		}
}
